name: Deploy Integration Resources
on:
  workflow_dispatch:
    inputs:
      run-terraform:
        type: boolean
        description: Run terraform?
        required: false
        default: false
      run-apigee:
        type: boolean
        description: Run Apigee job?
        required: false
        default: false

env:
  TF_VAR_tf_state_bucket: dft-d-tro-terraform-dev #TODO: Change to test after verification
  TF_VAR_environment: dev #TODO: Change to test after verification
  TF_VAR_integration_prefix: int
  TF_VAR_region: ${{ vars.DEFAULT_GCP_REGION }}
  TF_VAR_project_id: ${{ vars.GCP_PROJECT_ID_DEV }} #TODO: Change to test after verification
  TF_VAR_execution_service_account: ${{ secrets.EXECUTION_SERVICE_ACCOUNT }}
  TF_VAR_artifact_registry_image_path: ${{ vars.DEFAULT_GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID_DEV }}/${{ vars.GCP_PROJECT_DEV }}-int-repository/${{ vars.DTRO_IMAGE_NAME }} #TODO: Change to test after verification
  TF_VAR_dtro_service_image: ${{ vars.DTRO_IMAGE_NAME }}
  TF_VAR_tag: ${{ vars.DTRO_IMAGE_TAG }}

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  build-push-dtro:
    name: Build and Push DTRO Application to Artifact Registry - Integration
    if: ${{ inputs.run-terraform }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: dft-dtro-beta

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3.3.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }} #TODO: Change to test after verification
          service_account: ${{ secrets.WIP_SERVICE_ACCOUNT }} #TODO: Change to test after verification

      - name: Authenticate Docker with the Artifact Registry repository
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Build and push Docker image to Artifact Registry
        uses: docker/build-push-action@v6.1.0
        with:
          context: dft-dtro-beta/Src/DfT.DTRO
          platforms: linux/amd64
          push: true
          provenance: false
          tags: ${{ env.TF_VAR_artifact_registry_image_path }}:${{ env.TF_VAR_tag }}

  deploy-resources:
    name: Deploy GCP Resources to Integration
    if: ${{ inputs.run-terraform }}
    needs:
      - build-push-dtro
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: terraform-int
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }} #TODO: Change to test after verification
          service_account: ${{ secrets.WIP_SERVICE_ACCOUNT }} #TODO: Change to test after verification

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config "bucket=${{env.TF_VAR_tf_state_bucket}}" \
          -backend-config "prefix=terraform/int-cloudrun-state"

      - name: Terraform Plan
        run: terraform plan -input=false -out terraform-plan-gcp

#      - name: Terraform Apply
#        run: terraform apply -auto-approve -input=false terraform-plan-gcp

  build-apigee-proxies-and-products:
    name: Build GCP Apigee proxies and products in Integration
    if: ${{ inputs.run-apigee }}
    #    needs:
    #      - deploy-resources
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: apigee
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set executable permissions for environment script
        run: chmod +x environments/*

      - name: Load Env Vars for Apigee script
        run: ./environments/load_environment_variables.sh
        env:
          github_ref: ${{ github.ref }}
          environment: ${{ env.TF_VAR_environment }}
          service_account: ${{ secrets.WIP_SERVICE_ACCOUNT }}
          apigee_organisation: ${{ env.TF_VAR_project_id }}

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.wip_service_account }}
          token_format: access_token

      - name: Set up ApigeeCLI
        run: |
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
          echo "APIGEECLI_DEBUG=true" >> $GITHUB_ENV

      - name: Make scripts directory executable
        run: chmod +x portals/*

      - name: Deploy Proxy
        run: apigeecli apis create oas --name "$dtro-{env}-server" --oas-base-folderpath openApi --oas-name OpenAPIspecs-20240715.json --target-url $target_url --basepath /v1 --add-cors=true --token ${{ steps.google-auth.outputs.access_token }} --org "$apigee_organisation" --ovr --wait=true

  #      - name: Get Proxy Bundle
  #        run: |
  #          apigeecli apis export --token ${{ steps.google-auth.outputs.access_token }} --org "$apigee_organisation"
  #          unzip "$dtro-{env}-server.zip"
  #
  #      - name: Add Header Policy
  #        run: |
  ##          cp apigee/policies/AM-Add-Organisation-Header.xml apiproxy/policies/AM-Add-Organisation-Header.xml  TODO: Use this line when moving this job to dtro app repo
  #          cp policies/AM-Add-Organisation-Header.xml apiproxy/policies/AM-Add-Organisation-Header.xml
  #          gawk -i inplace '/<PostFlow name="PostFlow">/ { print; getline; print "   <Request>\n      <Step>\n        <Name>AM-Add-Organisation-Header</Name>\n      </Step>\n   </Request>"; next } 1' apiproxy/proxies/default.xml
  #          gawk -i inplace '/<Policies>/ { print $0 "\n        <Policy>AM-Add-Organisation-Header</Policy>"; next } 1' apiproxy/dtro-${env}-server.xml
  #
  #      - name: Create OAuth Policies
  #        uses: actions/setup-python@v5
  #        with:
  #          python-version: '3.10'
  #      - run: |
  ##          pip install -r apigee/python/requirements.txt  TODO: Use this line when moving this job to dtro app repo
  ##          python apigee/python/update-oauth-flows.py "src/common/src/main/resources/apds.yaml" apiproxy/proxies/default.xml
  ##          python apigee/python/generate-oauth-polices.py apiproxy/policies/OAuth-v20-1.xml "tra","sp" "oauth" apiproxy/dtro-${env}-server.xml
  #          pip install -r python/requirements.txt
  #          python python/update-oauth-flows.py "openApi/OpenAPIspecs-20240715.json" apiproxy/proxies/default.xml
  #          python python/generate-oauth-polices.py apiproxy/policies/OAuth-v20-1.xml "tra","sp" "oauth" apiproxy/dtro-${env}-server.xml
  #          cp -a oauth/* apiproxy/policies
  #          rm apiproxy/policies/OAuth-v20-1.xml
  #
  #      - name: Create API bundle
  #        run: zip -r proxy.zip apiproxy
  #
  #      - name: Upload and Deploy API Proxy Bundle
  #        run: apigeecli apis create bundle --name "${env}-server" --proxy-zip proxy.zip --env "dtro-${{ env.TF_VAR_integration_prefix }}-apigee-environment" --token ${{ steps.google-auth.outputs.access_token }} --org "$apigee_organisation" --ovr --wait=true
  #
  #      - name: Create Products
  #        run: |
  #          sed -i "s/ENV/${env}/g" apigee/products/products.json
  #          apigeecli products import -f apigee/products/products.json --token ${{ steps.google-auth.outputs.access_token }} --org "$apigee_organisation" --upsert
  #
  #      - name: Publish Products to Developer Portal
  #        run: apigee/portals/publish_product_to_portal.sh ${{ steps.google-auth.outputs.access_token }}
