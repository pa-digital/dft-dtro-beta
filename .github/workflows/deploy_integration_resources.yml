name: Deploy Integration Resources
on:
  workflow_dispatch:
    inputs:
      run-terraform:
        type: boolean
        description: Run terraform?
        required: false
        default: false
      run-apigee:
        type: boolean
        description: Run Apigee job?
        required: false
        default: false

env:
  TF_VAR_tf_state_bucket: dft-d-tro-terraform-test
  TF_VAR_environment: test
  TF_VAR_integration_prefix: int
  TF_VAR_region: ${{ vars.DEFAULT_GCP_REGION }}
  TF_VAR_project_id: ${{ vars.GCP_PROJECT_ID_TEST }}
  TF_VAR_execution_service_account: ${{ secrets.EXECUTION_SERVICE_ACCOUNT_TEST }}
  TF_VAR_artifact_registry_dtro_image_path: ${{ vars.DEFAULT_GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID_TEST }}/${{ vars.GCP_PROJECT_ID_TEST }}-int-repository/${{ vars.DTRO_IMAGE_NAME }}
  TF_VAR_artifact_registry_service_ui_image_path: ${{ vars.DEFAULT_GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID_TEST }}/${{ vars.GCP_PROJECT_ID_TEST }}-ui-int-repository/${{ vars.DTRO_SERVICE_UI_IMAGE_NAME }}
  TF_VAR_dtro_service_image: ${{ vars.DTRO_IMAGE_NAME }}
  TF_VAR_service_ui_image: ${{ vars.DTRO_SERVICE_UI_IMAGE_NAME }}
  TF_VAR_dtro_tag: ${{ vars.DTRO_IMAGE_TAG }}
  TF_VAR_service_ui_tag: ${{ vars.DTRO_SERVICE_UI_IMAGE_TAG }}

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  build-push-dtro:
    name: Build and Push DTRO Application to Artifact Registry - Integration
    if: ${{ inputs.run-terraform }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: dft-dtro-beta

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3.3.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_TEST }}
          service_account: ${{ secrets.WIP_SERVICE_ACCOUNT_TEST }}

      - name: Authenticate Docker with the Artifact Registry repository
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Build and push DTRO Docker image to Artifact Registry
        uses: docker/build-push-action@v6.1.0
        with:
          context: dft-dtro-beta/Src/DfT.DTRO
          platforms: linux/amd64
          push: true
          provenance: false
          tags: ${{ env.TF_VAR_artifact_registry_dtro_image_path }}:${{ env.TF_VAR_dtro_tag }}

      - name: Build and push Service Portal Docker image to Artifact Registry
        uses: docker/build-push-action@v6.1.0
        with:
          context: dft-dtro-beta/Src/Dft.DTRO.Admin
          platforms: linux/amd64
          push: true
          provenance: false
          tags: ${{ env.TF_VAR_artifact_registry_service_ui_image_path }}:${{ env.TF_VAR_service_ui_tag }}

  deploy-resources:
    name: Deploy GCP Resources to Integration
    if: ${{ inputs.run-terraform }}
    needs:
      - build-push-dtro
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: terraform-int
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_TEST }}
          service_account: ${{ secrets.WIP_SERVICE_ACCOUNT_TEST }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config "bucket=${{env.TF_VAR_tf_state_bucket}}" \
          -backend-config "prefix=terraform/int-cloudrun-state"

      - name: Terraform Plan
        run: terraform plan -input=false -out terraform-plan-gcp

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false terraform-plan-gcp

  build-apigee-proxies-and-products:
    name: Build GCP Apigee proxies and products in Integration
    if: ${{ inputs.run-apigee }}
    #        needs:
    #          - deploy-resources
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: apigee
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set executable permissions for environment script
        run: chmod +x environments/*

      - name: Load Env Vars for Apigee script
        run: ./environments/load_environment_variables.sh
        env:
          github_ref: ${{ github.ref }}
          environment: ${{ env.TF_VAR_environment }}
          env_name_prefix: ${{ env.TF_VAR_integration_prefix }}
          service_account: ${{ secrets.WIP_SERVICE_ACCOUNT }}
          apigee_organisation: ${{ env.TF_VAR_project_id }}

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_TEST }}
          service_account: ${{ secrets.WIP_SERVICE_ACCOUNT_TEST }}
          token_format: access_token

      - name: Set up ApigeeCLI
        run: |
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
          echo "APIGEECLI_DEBUG=true" >> $GITHUB_ENV

      - name: Make scripts directory executable
        run: chmod +x portals/*

      - name: Deploy Proxy
        run: apigeecli apis create oas --name "dtro-${env_name_prefix}-server" --oas-base-folderpath openApi --oas-name openapi3_0.yaml --target-url $target_url --basepath /v1 --add-cors=true --token ${{ steps.google-auth.outputs.access_token }} --org "$apigee_organisation" --ovr --wait=true

      - name: Get Proxy Bundle
        run: |
          apigeecli apis export --token ${{ steps.google-auth.outputs.access_token }} --org "$apigee_organisation"
          unzip "dtro-${env_name_prefix}-server.zip"

      - name: Add Header Policy
        run: |
          cp policies/AM-Set-App-Id-Header.xml apiproxy/policies/AM-Set-App-Id-Header.xml
          gawk -i inplace '/<PostFlow name="PostFlow">/ { print; getline; print "   <Request>\n      <Step>\n        <Name>AM-Set-App-Id-Header</Name>\n      </Step>\n   </Request>"; next } 1' apiproxy/proxies/default.xml
          gawk -i inplace '/<Policies>/ { print $0 "\n        <Policy>AM-Set-App-Id-Header</Policy>"; next } 1' apiproxy/dtro-${env_name_prefix}-server.xml

      - name: Setup Python
        uses: actions/setup-python@v5

      - name: Create OAuth Policies
        run: |
          pip install -r python/requirements.txt
          python python/update-oauth-flows.py "openApi/openapi3_0.yaml" apiproxy/proxies/default.xml
          python python/generate-oauth-polices.py apiproxy/policies/OAuth-v20-1.xml "cso","dsp","dc" "oauth" apiproxy/dtro-${env_name_prefix}-server.xml
          cp -a oauth/* apiproxy/policies

      - name: Create API bundle
        run: zip -r proxy.zip apiproxy

      - name: Upload and Deploy API Proxy Bundle
        run: apigeecli apis create bundle --name "dtro-${env_name_prefix}-server" --proxy-zip proxy.zip --env "dtro-${{ env.TF_VAR_integration_prefix }}-apigee-environment" --token ${{ steps.google-auth.outputs.access_token }} --org "$apigee_organisation" --ovr --wait=true

      - name: Create Products
        run: |
          sed -i "s/ENV/${env_name_prefix}/g" products/int_products.json
          apigeecli products import -f products/int_products.json --token ${{ steps.google-auth.outputs.access_token }} --org "$apigee_organisation" --upsert

      - name: Publish Products to Developer Portal
        run: portals/publish_int_product_to_int_portal.sh ${{ steps.google-auth.outputs.access_token }}
