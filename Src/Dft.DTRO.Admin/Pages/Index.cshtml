@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center" style="margin-top: 50px; margin-bottom: 50px">
    <h1 class="display-4">Dft DTRO</h1>
    <p>Dashboard</p>
</div>




<div style="display: flex;">
    <div id="metrics" style="grey; padding: 10px; flex: 1; position: relative;">
        <div style="display: flex; justify-content: center; align-items: center; height: 30vh;">
            <div style="position: relative; width: 70vh;">
                <canvas id="metricSummaryChart" ></canvas>

                <div id="stats" style="position: absolute; bottom: 0; right: 0;">
                    <div style="padding: 10px; flex: 1;">
                        <div class="checkbox-container" style="border: 1px solid lightgrey; padding: 10px;">
                            <div style="margin-bottom: 10px; display: flex; align-items: center; justify-content: flex-end;">
                                <span>Api Health</span>
                                <div style="display: inline-block; width: 20px; height: 20px; background-color: @(Model.HealthApi ? "#77DD77" : "#FF6961"); border: 1px solid grey; border-radius: 5px; margin-left: 10px;"></div>
                            </div>
                            <div style="margin-bottom: 10px; display: flex; align-items: center; justify-content: flex-end;">
                                <span>TraId Match</span>
                                <div style="display: inline-block; width: 20px; height: 20px; background-color: @(Model.TraIdMatch ? "#77DD77" : "#FF6961"); border: 1px solid grey; border-radius: 5px; margin-left: 10px;"></div>
                            </div>
                            <div style="margin-bottom: 10px; display: flex; align-items: center; justify-content: flex-end;">
                                <span>DatabaseHealth</span>
                                <div style="display: inline-block; width: 20px; height: 20px; background-color: @(Model.HealthDatabase ? "#77DD77" : "#FF6961"); border: 1px solid grey; border-radius: 5px; margin-left: 10px;"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
    </div> 
</div>




<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var canvas = document.getElementById('metricSummaryChart');
        var ctx = canvas.getContext('2d');

        var minimalValue = 0.01; // very small value to ensure visibility of zero-value slices

        var dataValues = [
    @Model.Metrics.SystemFailureCount,
    @Model.Metrics.SubmissionFailureCount,
    @Model.Metrics.SubmissionCount,
    @Model.Metrics.DeletionCount,
    @Model.Metrics.SearchCount,
    @Model.Metrics.EventCount
            ];

        var dataLabels = [
            'SystemFailure (' + (@Model.Metrics.SystemFailureCount <1 ? 0 : @Model.Metrics.SystemFailureCount) + ')',
            'SubmissionFailure (' + (@Model.Metrics.SubmissionFailureCount <1 ? 0 : @Model.Metrics.SubmissionFailureCount) + ')',
            'Submission (' + (@Model.Metrics.SubmissionCount <1 ? 0 : @Model.Metrics.SubmissionCount) + ')',
            'Deletion (' + (@Model.Metrics.DeletionCount <1 ? 0 : @Model.Metrics.DeletionCount) + ')',
            'Search (' + (@Model.Metrics.SearchCount <1 ? 0 : @Model.Metrics.SearchCount) + ')',
            'Event (' + (@Model.Metrics.EventCount <1 ? 0 : @Model.Metrics.EventCount) + ')'
        ];

        var data = {
            labels: dataLabels,
            datasets: [{
                data: dataValues.map(value => value > 0 ? value : minimalValue),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.5)', // pastel red
                    'rgba(255, 159, 64, 0.5)',  // pastel orange
                    'rgba(75, 192, 192, 0.5)',  // pastel green
                    'rgba(54, 162, 235, 0.5)',  // pastel dark blue
                    'rgba(153, 102, 255, 0.5)', // pastel blue
                    'rgba(201, 203, 207, 0.5)'  // pastel light blue
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(201, 203, 207, 1)'
                ],
                borderWidth: 1,
                hoverOffset: 10
            }]
        };

        var totalSubmissions = @Model.Metrics.SubmissionCount + @Model.Metrics.SubmissionFailureCount;
        var submissionPercentage = totalSubmissions > 0 ? (@Model.Metrics.SubmissionCount / totalSubmissions * 100).toFixed(2) : 0;

            var options = {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: true,
                    position: 'right', // Position the legend vertically on the right
                    align: 'start' // Align the legend items at the start
                },
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) { return '';
                        }
                    }
                }
            },
            cutout: '70%',
            elements: {
                arc: {
                    borderWidth: 2,
                    borderColor: '#fff'
                }
            },
            radius: '90%'
        };

        var centerTextPlugin = {
            id: 'centerText',
            beforeDraw: function (chart) {
                var width = chart.chartArea.right - chart.chartArea.left,
                    height = chart.chartArea.bottom - chart.chartArea.top,
                    ctx = chart.ctx;

                ctx.restore();
                var fontSize = (height / 228).toFixed(2);
                ctx.font = fontSize + "em sans-serif";
                ctx.textBaseline = "middle";

                var text = Math.round(submissionPercentage) + "%",
                    textX = Math.round((width - ctx.measureText(text).width) / 2),
                    textY = height / 2;

                ctx.fillText(text, textX, textY);
                ctx.save();
            }
        };

        Chart.register(centerTextPlugin);

        var metricSummaryChart = new Chart(ctx, {
            type: 'doughnut',
            data: data,
            options: options
        });

        metricSummaryChart.update();
    });
</script>