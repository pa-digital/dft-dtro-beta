
@page
@model DtroDropEditModel
@{
    bool isEdit = Request.Query["IsEdit"].ToString().ToLower() == "true";
    string id = Request.Query["id"];
}

<h2>@(isEdit ? "Edit Dtro " : "Add Dtro")</h2>

<form method="post" enctype="multipart/form-data">
    <div class="drop-area" id="drop-area">
        <div class="drop-area-inner">
            Drag & Drop
        </div>
    </div>

    <div style="margin-top: 20px">
        <label>Select file:</label>
        <input style="margin-left: 10px" type="file" id="fileInput" name="file" />
    </div>

    <div style="margin-top: 20px">
        <button id="saveButton" class="btn btn-primary" type="submit" disabled>Save</button>
    </div>
</form>

@if (isEdit)
{
    <div style="margin-top: 20px;">
        <table>
            <tr>
                <td>
                    <label for="reassignInput">Reassign to Tra ID</label>
                </td>
                <td style="width: 100px">
                    <input style="margin-left: 10px;" type="number" id="reassignInput" class="form-control" min="0" />
                </td>
                <td>
                    <button onclick="location.href='@Url.Action("OnPostReassign", new { id = Model.Id, assignToTraId = 121 })'" style="margin-left: 20px;" id="reassignButton" class="btn btn-secondary" disabled>Reassign</button>
                </td>
            </tr>
        </table>

        <label>swa_codes</label>
        <label>
            10, 11, 12, 13, 14, 16, 17, 18, 20, 30, 50, 60, 70, 114, 116, 119, 121, 230, 235
        </label>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            const fileInput = document.getElementById('fileInput');
            const saveButton = document.getElementById('saveButton');
            const dropArea = document.getElementById('drop-area');
            const reassignInput = document.getElementById('reassignInput');
            const reassignButton = document.getElementById('reassignButton');
            const apiBaseUrl = '@Model.ApiBaseUrl';
            const id = '@id';
            const isEdit = @isEdit.ToString().ToLower() === 'true';

            dropArea.addEventListener('dragover', (event) => {
                event.preventDefault();
                dropArea.classList.add('dragover');
            });

            dropArea.addEventListener('dragleave', () => {
                dropArea.classList.remove('dragover');
            });

            dropArea.addEventListener('drop', (event) => {
                event.preventDefault();
                dropArea.classList.remove('dragover');

                const files = event.dataTransfer.files;
                fileInput.files = files;
                dropArea.querySelector('.drop-area-inner').textContent = files[0].name;
                dropArea.style.backgroundColor = 'white';

                checkEnableSaveButton();
            });

            fileInput.addEventListener('change', checkEnableSaveButton);

            function checkEnableSaveButton() {
                const isFileDropped = fileInput.files.length > 0;
                saveButton.disabled = !isFileDropped;
            }

            if ('@isEdit.ToString().ToLower()' === 'true') {
                reassignInput.addEventListener('input', function () {
                    const isValidInteger = Number.isInteger(parseInt(reassignInput.value)) && reassignInput.value >= 0;
                    reassignButton.disabled = !isValidInteger;
                });


                // reassignButton.addEventListener('click', async function () {
                //     const assignToTraId = parseInt(reassignInput.value);
                //     const reassignUrl = `/DtroDropEdit/OnPostReassign`;

                //     try {
                //         const response = await fetch(reassignUrl, {
                //             method: 'POST',
                //             headers: {
                //                 'Content-Type': 'application/json'
                //             },
                //             body: JSON.stringify({
                //                 id: id,
                //                 assignToTraId: assignToTraId
                //             })
                //         });

                //         if (response.ok) {
                //             alert('Successfully reassigned the DTRO.');
                //         } else {
                //             alert('Failed to reassign the DTRO.');
                //         }
                //     } catch (error) {
                //         console.error('Error reassigning DTRO:', error);
                //         alert('An error occurred while reassigning the DTRO.');
                //     }
                // });
            }
        });
    </script>
}
