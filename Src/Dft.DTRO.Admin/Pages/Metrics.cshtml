@page
@model MetricsModel
@{
    ViewData["Title"] = "Metrics";
}

<div class="text-center" style="margin-top: 50px; margin-bottom: 50px">
    <h1 class="display-4">Metrics</h1>
</div>

<form id="searchSection" method="post" asp-page-handler="Update" style="display: flex;">
    <div>
        <div class="options-container" style="color: grey">
            <label>
                <input type="radio" name="PeriodOption" value="days" checked="@((Model.PeriodOption == "days"))" /> Days
            </label>
            <label>
                <input type="radio" name="PeriodOption" value="weeks" checked="@((Model.PeriodOption == "weeks"))" /> Weeks
            </label>
            <label>
                <input type="radio" name="PeriodOption" value="months" checked="@((Model.PeriodOption == "months"))" /> Months
            </label>

            <select id="numberSelect" name="NumberSelect" asp-for="NumberSelect">
                @for (int i = 1; i <= 7; i++)
                {
                    <option value="@i" selected="@((Model.NumberSelect == i))">@i</option>
                }
            </select>
        </div>

        @await Html.PartialAsync("_TraSearchPartial", Model.TraSearch)
    </div>


    <div id="pieChart" style="display: flex;">
        <div id="metrics" style="color: grey; padding-left: 10px; flex: 1; position: relative; height: 50vh;">
            <div style="display: flex; justify-content: center; align-items: center;height: 100%;">
                <div style="position: relative; width: 70vh; height: 100%;">
                    <canvas id="metricSummaryChart" style="height: 100%;"></canvas>
                </div>
            </div>
        </div>
    </div>

</form>

@section Scripts {

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const periodOptions = document.querySelectorAll('input[name="PeriodOption"]');
            const numberSelect = document.getElementById('numberSelect');
            const updateButton = document.getElementById('updateButton');
            const form = document.getElementById('searchSection');
            const selectedNumberValue = '@Model.NumberSelect'; // Use Razor to get the selected value

            // Function to update numberSelect options based on selected periodOption
            function updateNumberSelectOptions() {
                let max = 7;
                const selectedPeriod = document.querySelector('input[name="PeriodOption"]:checked').value;

                switch (selectedPeriod) {
                    case 'days':
                        max = 7;
                        break;
                    case 'weeks':
                        max = 4;
                        break;
                    case 'months':
                        max = 6;
                        break;
                }

                numberSelect.innerHTML = '';
                for (let i = 1; i <= max; i++) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.textContent = i;
                    if (i == selectedNumberValue) { // Preserve the selected value
                        option.selected = true;
                    }
                    numberSelect.appendChild(option);
                }
            }

            // Function to enable and trigger the update button
            function triggerUpdateButton() {
                updateButton.disabled = false; // Enable the button
                updateButton.click();          // Trigger the button click
            }

            // Event listener for periodOptions (days, weeks, months)
            periodOptions.forEach(option => {
                option.addEventListener('change', function () {
                    updateNumberSelectOptions();
                    triggerUpdateButton();  // Automatically trigger button click
                });
            });

            // Event listener for numberSelect changes
            numberSelect.addEventListener('change', function () {
                triggerUpdateButton();  // Automatically trigger button click
            });

            // Initialize the options on page load
            updateNumberSelectOptions();
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var canvas = document.getElementById('metricSummaryChart');
            var ctx = canvas.getContext('2d');

            var dataValues = [
        @Model.Metrics.SystemFailureCount,
        @Model.Metrics.SubmissionFailureCount,
        @Model.Metrics.SubmissionCount,
        @Model.Metrics.DeletionCount,
        @Model.Metrics.SearchCount,
        @Model.Metrics.EventCount
                    ];

            var total = dataValues.reduce((acc, curr) => acc + curr, 0);

            var dataLabels = [
                'API Failures (' + (@Model.Metrics.SystemFailureCount > 0 ? @Model.Metrics.SystemFailureCount : 0) + ')',
                'Submissions Rejected (' + (@Model.Metrics.SubmissionFailureCount > 0 ? @Model.Metrics.SubmissionFailureCount : 0) + ')',
                'Submissions Accepted (' + (@Model.Metrics.SubmissionCount > 0 ? @Model.Metrics.SubmissionCount : 0) + ')',
                'Dtro Deletions (' + (@Model.Metrics.DeletionCount > 0 ? @Model.Metrics.DeletionCount : 0) + ')',
                'Search Calls (' + (@Model.Metrics.SearchCount > 0 ? @Model.Metrics.SearchCount : 0) + ')',
                'Search Event (' + (@Model.Metrics.EventCount > 0 ? @Model.Metrics.EventCount : 0) + ')'
            ];

            // Check if all values are zero
            if (total === 0) {
                dataValues = [0];
                dataLabels = ['No data'];
            }

            var data = {
                labels: dataLabels,
                datasets: [{
                    label: 'Metrics',
                    data: dataValues,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.5)', // pastel red
                        'rgba(255, 159, 64, 0.5)',  // pastel orange
                        'rgb(144, 238, 144,0.5)',  // pastel green
                        'rgba(54, 162, 235, 0.5)',  // pastel dark blue
                        'rgba(153, 102, 255, 0.5)', // pastel blue
                        'rgba(201, 203, 207, 0.5)'  // pastel light blue
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(201, 203, 207, 1)'
                    ],
                    borderWidth: 1
                }]
            };

            var options = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1  // Customize this depending on your data range
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return tooltipItem.dataset.label + ': ' + tooltipItem.raw;
                            }
                        }
                    }
                }
            };

            var metricSummaryChart = new Chart(ctx, {
                type: 'bar',
                data: data,
                options: options
            });

            metricSummaryChart.update();
        });
    </script>

}


