@page
@model MetricsModel
@{
    ViewData["Title"] = "Metrics";
}

<div class="text-center" style="margin-top: 50px; margin-bottom: 50px">
    <h1 class="display-4">Metrics</h1>
</div>

<form id="searchSection" method="post" asp-page-handler="Update" style="display: flex;">
    <div>
        <!-- UserGroup Options -->
        <div class="options-container">
            <label>
                <input type="radio" name="UserGroup" value="Tra" checked="@((Model.UserGroup == "Tra"))" /> Publisher
            </label>
            <label>
                <input type="radio" name="UserGroup" value="Consumer" checked="@((Model.UserGroup == "Consumer"))" /> Consumer
            </label>
            <label>
                <input type="radio" name="UserGroup" value="Admin" checked="@((Model.UserGroup == "Admin"))" /> Admin
            </label>
        </div>

        <!-- Period Options -->
        <div class="options-container" style="color: grey">
            <label>
                <input type="radio" name="PeriodOption" value="days" checked="@((Model.PeriodOption == "days"))" /> Days
            </label>
            <label>
                <input type="radio" name="PeriodOption" value="weeks" checked="@((Model.PeriodOption == "weeks"))" /> Weeks
            </label>
            <label>
                <input type="radio" name="PeriodOption" value="months" checked="@((Model.PeriodOption == "months"))" /> Months
            </label>

            <select id="numberSelect" name="NumberSelect" asp-for="NumberSelect">
                @for (int i = 1; i <= 7; i++)
                {
                    <option value="@i" selected="@((Model.NumberSelect == i))">@i</option>
                }
            </select>
        </div>

        @await Html.PartialAsync("_TraSearchPartial", Model.DtroUserSearch)
    </div>

    <div id="pieChart" style="display: flex;">
        <div id="metrics" style="color: grey; padding-left: 10px; flex: 1; position: relative;">
            <div style="display: flex; justify-content: center; align-items: center; height: 100%;">
                <div style="position: relative; width: 70vh; height: 50vh;">
                    <canvas id="metricSummaryChart" style="width: 100%; height: 100%;"></canvas>
                    <!-- Button Container -->
                    <div style="display: flex; justify-content: flex-end; margin-top: 20px;">
                        <button type="submit" name="exportCsv" value="true" class="btn btn-primary">
                            Export
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const periodOptions = document.querySelectorAll('input[name="PeriodOption"]');

            const updateButton = document.getElementById('updateButton');
            const userGroupOptions = document.querySelectorAll('input[name="UserGroup"]');
            const numberSelect = document.getElementById('numberSelect');
            const form = document.getElementById('searchSection');
            const selectedNumberValue = '@Model.NumberSelect'; // Use Razor to get the selected value

            // Function to update numberSelect options based on selected periodOption
            function updateNumberSelectOptions() {
                let max = 7;
                const selectedPeriod = document.querySelector('input[name="PeriodOption"]:checked').value;

                switch (selectedPeriod) {
                    case 'days':
                        max = 7;
                        break;
                    case 'weeks':
                        max = 4;
                        break;
                    case 'months':
                        max = 6;
                        break;
                }

                numberSelect.innerHTML = '';

                for (let i = 1; i <= max; i++) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.textContent = i;
                    if (i == selectedNumberValue) { // Preserve the selected value
                        option.selected = true;
                    }
                    numberSelect.appendChild(option);
                }
            }

            // Function to enable and trigger the update button
            function triggerUpdateButton() {
                updateButton.disabled = false; // Enable the button
                updateButton.click();          // Trigger the button click
            }

            // Event listeners for UserGroup and PeriodOption changes to submit form
            userGroupOptions.forEach(option => {
                option.addEventListener('change', function () {

                    const traSearch = document.getElementById('traSearch');
                    if (traSearch) {
                        traSearch.focus();
                    }

                    triggerUpdateButton();  // Automatically trigger button click
                });
            });

            periodOptions.forEach(option => {
                option.addEventListener('change', function () {
                    updateNumberSelectOptions();
                    triggerUpdateButton();  // Automatically trigger button click
                });
            });

            // Event listener for numberSelect changes
            numberSelect.addEventListener('change', function () {
                triggerUpdateButton();  // Automatically trigger button click
            });

            // Initialize the options on page load
            updateNumberSelectOptions();

            // Update chart based on selected UserGroup
            function updateChart() {
                const userGroup = document.querySelector('input[name="UserGroup"]:checked').value;
                let labels = [];
                let data = [];

                // Update labels and data based on UserGroup
                if (userGroup === 'Admin') {
                    labels = ['Submission','Rejected','Deletion', 'Search', 'Event', 'Fault'];
                    data = [
                                @Model.Metrics.SubmissionCount,
                                @Model.Metrics.SubmissionFailureCount,
                                @Model.Metrics.DeletionCount,
                                @Model.Metrics.SearchCount,
                                @Model.Metrics.EventCount,
                                @Model.Metrics.SystemFailureCount
                            ];
                } else if (userGroup === 'Tra') {
                    labels = ['Submission', 'Rejected', 'Deletion', 'Fault'];
                    data = [
                                @Model.Metrics.SubmissionCount,
                                @Model.Metrics.SubmissionFailureCount,
                                @Model.Metrics.DeletionCount,
                                @Model.Metrics.SystemFailureCount
                           ];
                } else if (userGroup === 'Consumer') {
                    labels = ['Search', 'Event', 'Fault'];
                    data = [
                                @Model.Metrics.SearchCount,
                                @Model.Metrics.EventCount,
                                @Model.Metrics.SystemFailureCount
                           ];
                }

                // Destroy existing chart instance if exists
                if (window.metricChart) {
                    window.metricChart.destroy();
                }

                // Define color variables
                const pastelRed = 'rgba(255, 99, 132, 0.5)';
                const pastelOrange = 'rgba(255, 159, 64, 0.5)';
                const pastelGreen = 'rgb(144, 238, 144, 0.5)';
                const pastelDarkBlue = 'rgba(54, 162, 235, 0.5)';
                const pastelBlue = 'rgba(153, 102, 255, 0.5)';
                const pastelLightBlue = 'rgba(201, 203, 207, 0.5)';

                const borderRed = 'rgba(255, 99, 132, 1)';
                const borderOrange = 'rgba(255, 159, 64, 1)';
                const borderGreen = 'rgba(75, 192, 192, 1)';
                const borderDarkBlue = 'rgba(54, 162, 235, 1)';
                const borderBlue = 'rgba(153, 102, 255, 1)';
                const borderLightBlue = 'rgba(201, 203, 207, 1)';

                // Create a new chart
                const ctx = document.getElementById('metricSummaryChart').getContext('2d');
                window.metricChart = new Chart(ctx, {
                    type: 'bar', // You can change to 'pie', 'line', etc.
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Metrics Summary',
                            data: data,
                            backgroundColor: [
                                pastelGreen,
                                pastelOrange,
                                pastelDarkBlue,
                                pastelBlue,
                                pastelLightBlue,
                                pastelRed
                            ],
                            borderColor: [
                                borderGreen,
                                borderOrange,
                                borderDarkBlue,
                                borderBlue,
                                borderLightBlue,
                                borderRed
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1, // Ensures that the ticks are whole numbers
                                    callback: function (value) {
                                        return Number.isInteger(value) ? value : ''; // Display only whole numbers
                                    }
                                }
                            }
                        }
                    }
                });
            }

            // Initialize the chart on page load
            updateChart();

           
        });
    </script>

}


