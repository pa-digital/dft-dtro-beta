@page
@model DtroHistoryModel

<h2>Source History</h2>
@if (Model.SourceHistory != null && Model.SourceHistory.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Action Type</th>
                <th>Created</th>
                <th>Last Updated</th>
                <th>Reference</th>
                <th>Schema Version</th>
                <th>Section</th>
                <th>Traffic Authority Creator Id</th>
                <th>Traffic Authority Owner Id</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @for (int i = 0; i < Model.SourceHistory.Count; i++)
            {
                var currentItem = Model.SourceHistory[i];
                <tr>
                    <td>@currentItem.ActionType</td>
                    <td>@currentItem.Created</td>
                    <td>@currentItem.LastUpdated</td>
                    <td>@currentItem.Reference</td>
                    <td>@currentItem.SchemaVersion</td>
                    <td>@currentItem.Section</td>
                    <td>@currentItem.TrafficAuthorityCreatorId</td>
                    <td>@currentItem.TrafficAuthorityOwnerId</td>
                    <td>
                        @if (i < Model.SourceHistory.Count - 1)
                        {
                            <button class="btn btn-primary" onclick="compareSource(@i)">Compare</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No source history found.</p>
}

<h2>Provision History</h2>
@if (Model.ProvisionHistory != null && Model.ProvisionHistory.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Action Type</th>
                <th>Created</th>
                <th>Last Updated</th>
                <th>Reference</th>
                <th>Schema Version</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.ProvisionHistory.Count; i++)
            {
                var currentItem = Model.ProvisionHistory[i];
                <tr>
                    <td>@currentItem.ActionType</td>
                    <td>@currentItem.Created</td>
                    <td>@currentItem.LastUpdated</td>
                    <td>@currentItem.Reference</td>
                    <td>@currentItem.SchemaVersion</td>
                    <td>
                        @if (i < Model.ProvisionHistory.Count - 1)
                        {
                            <button class="btn btn-primary" onclick="compareProvision(@i)">Compare</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No provision history found.</p>
}

<div id="comparisonResults" style="display: none;">
    <h2>Comparison Results</h2>
    <button class="btn btn-warning" onclick="hideComparisonResults()">Close</button>
    <table id="comparisonTable" class="table">
        <thead>
            <tr>
                <th>Field</th>
                <th>Value in Previous</th>
                <th>Value in Selected</th>
            </tr>
        </thead>
        <tbody id="comparisonBody">
            <!-- Comparison results will be populated here dynamically -->
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        var sourceHistory = @Html.Raw(Json.Serialize(Model.SourceHistory));
        var provisionHistory = @Html.Raw(Json.Serialize(Model.ProvisionHistory));

        function compareSource(index) {
            var currentData = sourceHistory[index];
            var nextData = sourceHistory[index + 1];

            console.log('sourceHistory:', sourceHistory);

            console.log('currentData:', currentData);
            console.log('nextData:', nextData);

            var comparisonBody = document.getElementById('comparisonBody');
            comparisonBody.innerHTML = '';
          
            for (var key in currentData) {
                if (currentData.hasOwnProperty(key)) {
                    if (key !== 'lastUpdated' && key !== 'actionType' && key !== 'isCurrent') { 
                        if (JSON.stringify(currentData[key]) !== JSON.stringify(nextData[key])) {
                            var newRow = comparisonBody.insertRow();
                            var cell1 = newRow.insertCell(0);
                            var cell2 = newRow.insertCell(1);
                            var cell3 = newRow.insertCell(2);

                            cell1.textContent = key;
                            cell2.textContent = JSON.stringify(nextData[key]);
                            cell3.textContent = JSON.stringify(currentData[key]);
                        }
                    }
                }
            }

            document.getElementById('comparisonResults').style.display = 'block';
        }

        function compareProvision(index) {
            var currentData = provisionHistory[index];
            var nextData = provisionHistory[index + 1];

            var comparisonBody = document.getElementById('comparisonBody');
            comparisonBody.innerHTML = '';

            compareObjects(currentData, nextData, comparisonBody);

            document.getElementById('comparisonResults').style.display = 'block';
        }

        function compareObjects(currentObj, nextObj, comparisonBody, parentKey = '', addedKeys = new Set()) {
            for (var key in currentObj) {
                if (currentObj.hasOwnProperty(key)) {
                    if (key !== 'lastUpdated' && key !== 'actionType' && key !== 'isCurrent') {
                        var currentValue = currentObj[key];
                        var nextValue = nextObj[key];

                        if (typeof currentValue === 'object' && typeof nextValue === 'object') {
                            // Recursively compare nested objects
                            compareObjects(currentValue, nextValue, comparisonBody, key, addedKeys);
                        } else {
                            // Compare non-nested values
                            if (JSON.stringify(currentValue) !== JSON.stringify(nextValue)) {
                                var displayKey = parentKey ? `${parentKey}.${key}` : key;
                                var keyString = `${displayKey}:${JSON.stringify(currentValue)}:${JSON.stringify(nextValue)}`;

                                if (!addedKeys.has(key)) {
                                    var newRow = comparisonBody.insertRow();
                                    var cell1 = newRow.insertCell(0);
                                    var cell2 = newRow.insertCell(1);
                                    var cell3 = newRow.insertCell(2);

                                    cell1.textContent = key;
                                    cell2.textContent = JSON.stringify(nextValue);
                                    cell3.textContent = JSON.stringify(currentValue);

                                    addedKeys.add(key); // Mark this key as added
                                }
                            }
                        }
                    }
                }
            }
        }



        function hideComparisonResults() {
            document.getElementById('comparisonResults').style.display = 'none';
        }
    </script>

}
