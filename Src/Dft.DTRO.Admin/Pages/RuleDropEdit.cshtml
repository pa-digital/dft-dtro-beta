@page
@model RuleDropEditModel
@inject ISystemConfigService SystemConfigService
@inject IDtroUserService DtroUserService
@{
    var systemConfig = await SystemConfigService.GetSystemConfig();
    var user = await DtroUserService.GetDtroUserAsyncByXAppId(systemConfig.xAppId);
    var isAdmin = user.UserGroup == UserGroup.Admin;

    var isEdit = Request.Query["IsEdit"].ToString().ToLower() == isAdmin.ToString();
    string version = Request.Query["version"];
}

<h2>@(isEdit ? "Edit Rule" : "Add Rule")</h2>
<form method="post" enctype="multipart/form-data">

    <input type="hidden" name="IsEdit" value="@(isEdit.ToString().ToLower())" />
    <input type="hidden" id="hiddenVersionInput" name="Version" value="@version" />


    <div style="margin-top: 30px">
        <label>Version </label>
        <input type="text" id="versionInput" value="@version" disabled style="background-color: #f0f0f0;" />
    </div>

    <div class="drop-area" id="drop-area">
        <div class="drop-area-inner">
            Drag & Drop
        </div>
    </div>

    <div style="margin-top: 20px">
        <label>Select file:</label>
        <input style="margin-left: 10px" name="file" type="file" id="fileInput" />
    </div>

    <div style="margin-top: 20px">
        <button id="saveButton" class="btn btn-primary" type="submit" disabled>Save</button>
    </div>
</form>

@section Scripts {
    <script>
        const fileInput = document.getElementById('fileInput');
        const saveButton = document.getElementById('saveButton');
        const dropArea = document.getElementById('drop-area');
        const versionInput = document.getElementById('versionInput');
        const isEdit = @isEdit.ToString().ToLower();

        dropArea.addEventListener('dragover', (event) => {
            event.preventDefault();
            dropArea.classList.add('dragover');
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('dragover');
        });

        dropArea.addEventListener('drop', (event) => {
            event.preventDefault();
            dropArea.classList.remove('dragover');

            const files = event.dataTransfer.files;
            fileInput.files = files;
            dropArea.querySelector('.drop-area-inner').textContent = files[0].name;
            dropArea.style.backgroundColor = 'white';

            checkEnableSaveButton();
        });

        fileInput.addEventListener('change', function () {
            checkEnableSaveButton();
        });

        function checkEnableSaveButton() {
            const validVersionRegex = /^\d+\.\d+\.\d+(\.\d+)*$/;
            const isValidVersion = validVersionRegex.test(versionInput.value);
            const isFileDropped = fileInput.files.length > 0;

            // Enable save button only if both file dropped and valid version entered
            saveButton.disabled = !(isValidVersion && isFileDropped);
        }

        // If editing, disable the version input and apply styles accordingly
        if (isEdit) {
            versionInput.disabled = true;
        }

    </script>
}
