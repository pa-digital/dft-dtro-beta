@page "{dtroUserId:Guid?}"
@model DtroUserEditModel
@{
    bool isEdit = Model.IsEdit;
    string search = Request.Query["search"];
}

<h2>@(isEdit ? "Edit User" : "Add User")</h2>

<form method="post" class="form-horizontal">
    <div style="max-width:600px">

        <div class="form-group row" style="margin-top:10px">
            <label for="Id" class="col-sm-2 col-form-label">Id</label>
            <div class="col-sm-10">
                <input type="text" disabled class="form-control" id="id" name="DtroUser.Id" value="@Model.DtroUser.Id" />
            </div>
        </div>

        <div class="form-group row" style="margin-top:10px">
            <label class="col-sm-2 col-form-label">User Group</label>
            <div class="col-sm-10">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="DtroUser.UserGroup" id="userGroupTra" value="Tra" @(isEdit && Model.DtroUser.UserGroup == UserGroup.Tra ? "checked" : "") @(isEdit ? "" : "checked")>
                    <label class="form-check-label" for="userGroupTra">Tra</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="DtroUser.UserGroup" id="userGroupConsumer" value="Consumer" @(isEdit && Model.DtroUser.UserGroup == UserGroup.Consumer ? "checked" : "")>
                    <label class="form-check-label" for="userGroupConsumer">Consumer</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="DtroUser.UserGroup" id="userGroupAdmin" value="Admin" @(isEdit && Model.DtroUser.UserGroup == UserGroup.Admin ? "checked" : "")>
                    <label class="form-check-label" for="userGroupAdmin">Admin</label>
                </div>
            </div>
        </div>

        <div class="form-group row" style="margin-top:10px">
            <label for="traId" class="col-sm-2 col-form-label">TA Id</label>
            <div class="col-sm-10">
                <input type="number" style="max-width:140px" class="form-control" id="traId" name="DtroUser.TraId" value="@Model.DtroUser.TraId"/>
            </div>
        </div>

        <div class="form-group row" style="margin-top:10px">
            <label for="xAppId" class="col-sm-2 col-form-label">x-App-Id</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="xAppId" name="DtroUser.xAppId" value="@Model.DtroUser.xAppId" required />
            </div>
        </div>

        <div class="form-group row" style="margin-top:10px">
            <label for="name" class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="name" name="DtroUser.Name" value="@Model.DtroUser.Name" required />
            </div>
        </div>

        <div class="form-group row" style="margin-top:10px">
            <label for="prefix" class="col-sm-2 col-form-label">Prefix</label>
            <div class="col-sm-10">
                <input type="text" style="max-width:140px" class="form-control" id="prefix" name="DtroUser.Prefix" value="@Model.DtroUser.Prefix" maxlength="2" required />
            </div>
        </div>

        <div class="form-group row" style="margin-top:20px">
            <div class="col-sm-10 offset-sm-2 text-right">
                <button id="saveButton" class="btn btn-primary" type="submit" disabled>@(isEdit ? "Update" : "Create")</button>
                <button id="cancelButton" class="btn btn-secondary" type="button">Cancel</button>
            </div>
        </div>
    </div>
</form>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const saveButton = document.getElementById("saveButton");
            const cancelButton = document.getElementById("cancelButton");
            const requiredFields = document.querySelectorAll("input[required]");
            const traIdInput = document.getElementById("traId");
            const userGroupInputs = document.querySelectorAll('input[name="DtroUser.UserGroup"]');
            const userGroupTra = document.getElementById("userGroupTra");
            const userGroupConsumer = document.getElementById("userGroupConsumer");
            const userGroupAdmin = document.getElementById("userGroupAdmin");

            let originalValues = {
                traId: traIdInput.value,
                name: document.getElementById("name").value,
                xAppId: document.getElementById("xAppId").value,
                prefix: document.getElementById("prefix").value,
                userGroup: document.querySelector('input[name="DtroUser.UserGroup"]:checked').value
            };

            function updateSaveButtonState() {
                const allRequiredFieldsFilled = Array.from(requiredFields).every(f => f.value.trim() !== "");
                const traIdValid = userGroupTra.checked ? traIdInput.value.trim() !== "" : true;
                const dataChanged = hasDataChanged();

                saveButton.disabled = !(allRequiredFieldsFilled && traIdValid && dataChanged);
            }

            function hasDataChanged() {
                return (
                    originalValues.traId !== traIdInput.value ||
                    originalValues.name !== document.getElementById("name").value ||
                    originalValues.xAppId !== document.getElementById("xAppId").value ||
                    originalValues.prefix !== document.getElementById("prefix").value ||
                    originalValues.userGroup !== document.querySelector('input[name="DtroUser.UserGroup"]:checked').value
                );
            }

            function handleUserGroupChange() {
                if (userGroupTra.checked) {
                    traIdInput.disabled = false; // Enable TraId input if Tra is selected
                    traIdInput.value = originalValues.traId; // Restore the original TraId if Tra is selected
                    traIdInput.required = true; // Make TraId required if Tra is selected
                } else {
                    traIdInput.value = ""; // Clear the TraId if a non-Tra group is selected
                    traIdInput.disabled = true; // Disable TraId input if a non-Tra group is selected
                    traIdInput.required = false; // Make TraId not required if Tra is not selected
                }
                updateSaveButtonState(); // Update save button state after change
            }

            // Initial setup
            handleUserGroupChange();
            updateSaveButtonState(); // Ensure button state is set on load

            requiredFields.forEach(field => {
                field.addEventListener("input", updateSaveButtonState);
            });

            userGroupInputs.forEach(group => {
                group.addEventListener("change", function () {
                    handleUserGroupChange();
                    updateSaveButtonState();
                });
            });

            cancelButton.addEventListener('click', function () {
                const cancelInput = document.createElement('input');
                cancelInput.type = 'hidden';
                cancelInput.name = 'action';
                cancelInput.value = 'Cancel';
                form.appendChild(cancelInput);
                form.submit();
            });
        });
    </script>
}
