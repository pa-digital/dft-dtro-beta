@model TraSearch

<div class="rounded-box">
    <div style="display: flex; align-items: center;">
        <label style="margin-right: 10px;">TRA</label>
        <input type="text" id="traSearch" name="TraSearch.Search"  placeholder="Search..." style="width: 100%; margin-right: 10px;" value="@Model.Search" />
        <input type="hidden" style="max-width: 30px;" id="selectedValue" name="TraSearch.TraSelect" />
        <input type="hidden" style="max-width: 30px;" name="TraSearch.PreviousTraSelect" value="@Model.PreviousTraSelect" />
        <input type="hidden" style="max-width: 30px;" name="TraSearch.PreviousSearch" value="@Model.PreviousSearch" />

        <input type="hidden" id="alwaysButtonEnabled" value="@Model.AlwaysButtonEnabled.ToString().ToLower()" />
        <button id="updateButton" class="btn btn-primary" type="submit">@Model.UpdateButtonText</button>
    </div>

    <div id="traSelectContainer" style="margin-top: 10px;">
        <div id="traSelect" class="select-items" style="width: 100%;">
            @{
                foreach (var item in Model.SwaCodes)
                {
                    if (item.TraId == Model.TraSelect)
                    {
                        if (item.TraId == 0)
                        {
                            <div style="width: 100%;" class="item selected" data-value="@item.TraId">
                                @item.Name
                            </div>
                            <script>
                                document.getElementById('traSearch').value = '';
                                document.getElementById('selectedValue').value = '@item.TraId';
                            </script>
                        }
                        else
                        {
                            <div style="width: 100%;" class="item selected" data-value="@item.TraId">
                                @item.Name <span style="opacity: 0.5;">[@item.TraId]</span>
                            </div>
                            <script>
                                document.getElementById('traSearch').value = '@item.Name';
                                document.getElementById('selectedValue').value = '@item.TraId';
                            </script>
                        }
                    }
                    else
                    {
                        if (item.TraId == 0)
                        {
                            <div style="width: 100%;" class="item" data-value="@item.TraId">
                                @item.Name
                            </div>
                        }
                        else
                        {
                            <div style="width: 100%;" class="item" data-value="@item.TraId">
                                @item.Name <span style="opacity: 0.5;">[@item.TraId]</span>
                            </div>
                        }
                    }
                }
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const traSearch = document.getElementById('traSearch');
        const traSelectContainer = document.getElementById('traSelectContainer');
        const traSelect = document.getElementById('traSelect');
        const selectedValueInput = document.getElementById('selectedValue');
        const updateButton = document.getElementById('updateButton');
        const alwaysButtonEnabled = document.getElementById('alwaysButtonEnabled').value === 'true';
        let selectedItemId = null; // Track the currently selected item ID

        updateButton.disabled = true;

        // Event listener for search input on traSelect
        traSearch.addEventListener('input', function () {

            const searchValue = traSearch.value.trim().toLowerCase();
            const items = traSelectContainer.getElementsByClassName('item');

            // Check if search value contains a number
            const searchContainsNumber = /\d/.test(searchValue);

            // Loop through each item and toggle display based on search value
            Array.from(items).forEach(item => {
                const itemId = item.getAttribute('data-value');
                const itemName = item.textContent.trim().toLowerCase();

                if (searchValue === '') {
                    item.style.display = 'block';
                }
                else {
                    // Show item if matches search text or if search contains a number and item ID contains that number
                    if (itemName.includes(searchValue) || (searchContainsNumber && itemId.includes(searchValue))) {
                        item.style.display = 'block';
                    } else {
                        item.style.display = 'none';
                    }
                }
            });

            // Enable or disable the button based on the conditions
            if (alwaysButtonEnabled && searchValue.length >= 3) {
                updateButton.disabled = false;

            } else {
                updateButton.disabled = searchContainsNumber;
            }

            // Clear selection highlight and reset selected item ID when search changes
            clearSelection();
            selectedItemId = null;
        });

        // Event listener for selecting an item in traSelect
        traSelectContainer.addEventListener('click', function (event) {
            const selectedItem = event.target.closest('.item');
            if (selectedItem) {
                const selectedItemId = selectedItem.getAttribute('data-value');

                // Extract the text before '['
                const selectedItemText = selectedItem.textContent.trim();
                const index = selectedItemText.indexOf('['); // Find the index of '['
                const selectedItemName = index !== -1 ? selectedItemText.slice(0, index).trim() : selectedItemText;

                // Remove selection from previously selected item
                clearSelection();

                // Add selection to the clicked item
                selectedItem.classList.add('selected-InList');

                // Update the hidden input value
                selectedValueInput.value = selectedItemId;

                // Update the search text box with the selected item's name
                traSearch.value = selectedItemName;

                updateButton.disabled = false;
            }
        });

        // Event listener to clear search text box on first focus
        traSearch.addEventListener('focus', function () {
            clearSelection();
            // Update the hidden input value
            selectedValueInput.value = 0;
            traSearch.value = ''; // Clear the search text box

        });

        // Function to clear selection highlight
        function clearSelection() {
            const selectedItems = traSelectContainer.querySelectorAll('.item.selected-InList');

            if (!alwaysButtonEnabled) {
                updateButton.disabled = true;
            }
           
            selectedItems.forEach(item => {
                item.classList.remove('selected-InList');
            });
        }
    });
</script>
