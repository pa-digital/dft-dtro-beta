@page
@using Dft.DTRO.Admin.Models.Errors
@model ErrorModel
@{
    ViewData["Title"] = "Error";
}
<h1>Error</h1>

<h3>Type: @Model.ErrorView.ErrorType</h3>

@if (Model.ErrorView != null)
{
    <!-- UI Error Response, Error -->
    @if (Model.ErrorView?.UiErrorResponse != null)
    {
        <h4>Details:</h4>
        <div>
            <strong>Message:</strong> @Model.ErrorView.UiErrorResponse.Message<br />
            <strong>Error:</strong> @Model.ErrorView.UiErrorResponse.Error <br />
        </div>
    }


    <!-- Api Error Response, Error -->
    @if (Model.ErrorView?.ApiErrorResponse != null)
    {
        <h4>Details:</h4>
        <div>
            @if (!string.IsNullOrEmpty(Model.ErrorView.ApiErrorResponse.Message))
            {
                <strong>Message:</strong> @Model.ErrorView.ApiErrorResponse.Message

                <br />
            }

            @if (!string.IsNullOrEmpty(Model.ErrorView.ApiErrorResponse.Error))
            {
                <strong>Error:</strong> @Model.ErrorView.ApiErrorResponse.Error

                <br />
            }
        </div>
    }


    <!-- Schema Version Error -->
    @if (Model.ErrorView?.DtroValidationException?.RequestComparedToSchemaVersion != null)
    {
        <h4>Request Compared To Schema Version:</h4>
        <div>
            <strong>Schema Version Error:</strong> @Model.ErrorView.DtroValidationException?.RequestComparedToSchemaVersion.Message
        </div>
    }

    <!-- Request Compared To Schema Errors -->
    @if (Model.ErrorView?.DtroValidationException?.RequestComparedToSchema != null && Model.ErrorView.DtroValidationException.RequestComparedToSchema.Any())
    {
        <h4>Request Compared To Schema Errors:</h4>
        <ul>
            @{
                int? previousLineNumber = null;
            }
            @foreach (var jsonError in Model.ErrorView.DtroValidationException.RequestComparedToSchema)
            {
                if (previousLineNumber != null && previousLineNumber != jsonError.LineNumber)
                {
                    <br />
                }

                DisplayJsonValidationError(jsonError);
                previousLineNumber = jsonError.LineNumber;
            }
        </ul>

    }

    <!-- Request Compared To Rules Errors -->
    @if (Model.ErrorView?.DtroValidationException?.RequestComparedToRules != null && Model.ErrorView.DtroValidationException.RequestComparedToRules.Any())
    {
        <h4>Request Compared To Rules Errors:</h4>
        <ul>
            @foreach (var semanticError in Model.ErrorView.DtroValidationException.RequestComparedToRules)
            {
                <li>
                    <strong>Message:</strong> @semanticError.Message <br />
                    <strong>Path:</strong> @semanticError.Path <br />
                </li>
            }
        </ul>
    }
}
@functions {
    void DisplayJsonValidationError(DtroJsonValidationErrorResponse error)
    {
        <li>
            @if (!string.IsNullOrEmpty(error.Message))
            {
                <strong>Message:</strong> @error.Message <br />
            }

            @if (error.LineNumber != 0)
            {
                <strong>Line Number:</strong> @error.LineNumber <br />
            }

            @if (error.LinePosition != 0)
            {
                <strong>Line Position:</strong> @error.LinePosition <br />
            }

            @if (!string.IsNullOrEmpty(error.Path))
            {
                <strong>Path:</strong> @error.Path <br />
            }

            @if (!string.IsNullOrEmpty(error.ErrorType))
            {
                <strong>Type:</strong> @error.ErrorType <br />
            }

           
        </li>
    }
}

@*@if (error.ChildErrors != null && error.ChildErrors.Any())
{
    <ul>
        @foreach (var childError in error.ChildErrors)
        {
            DisplayJsonValidationError(childError);
        }
    </ul>
} *@